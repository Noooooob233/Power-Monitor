##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.5.2] date: [Sun Mar 22 21:18:08 CST 2020]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

# $@--目标文件，$^--所有的依赖文件，$<--第一个依赖文件。

######################################
# target
######################################
TARGET = power_monitor


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -O1
# 显示命令
# Q		:= @

#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources

C_SOURCES := $(shell find ./ -name '*.c')  

# C_SOURCES =  \
# applications/Src/main.c \
# applications/Src/stm32f1xx_it.c \
# applications/Src/stm32f1xx_hal_msp.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio_ex.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim_ex.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc_ex.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c \
# STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti.c \
# Src/system_stm32f1xx.c  

# ASM sources
ASM_SOURCES =  \
Startup/startup_stm32f103xb.s \
rt-thread/libcpu/arm/cortex-m3/context_gcc.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F103xB

# AS includes
AS_INCLUDES = 

# C includes

#C_INCLUDES := $(shell find ./ -name '*.h')  

C_INCLUDES =  \
-Iapplications/Inc \
-ICMSIS/Inc \
-Idrivers \
-Idrivers/STM32_USB_Device_Library/Class/CDC/Inc \
-Idrivers/STM32_USB_Device_Library/core/Inc \
-Idrivers/STM32_USB_Device_Library \
-Idevicenet \
-Idevicenet/obj \
-Igui \
-Igui/core \
-Igui/object \
-Igui/font \
-Igui/misc \
-Irt-thread/components/finsh \
-Irt-thread/include \
-Irt-thread/include/libc \
-ISTM32F1xx_HAL_Driver/Inc \
-ISTM32F1xx_HAL_Driver/Inc/Legacy \


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F103C8Tx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
# all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin
all: $(BUILD_DIR)/$(TARGET).elf $(TARGET).hex $(TARGET).bin

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES))) #在ASM_SOURCES中寻找.s文件

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) # ‘|’ 当build_dir不存在时会创建
	$(Q)$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(Q)$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(Q)$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

%.hex: $(BUILD_DIR)/%.elf 
	$(HEX) $< $@
	
%.bin: $(BUILD_DIR)/%.elf
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
	-rm -f $(TARGET).hex
	-rm -f $(TARGET).bin
  
OOCD		 := openocd
#OOCDFLAGS	 := -f /usr/local/share/openocd/scripts/interface/stlink-v2.cfg
#OOCDFLAGS	 += -f /usr/local/share/openocd/scripts/target/stm32f4x.cfg
OOCDFLAGS        += -f openocd.cfg

#######################################
# flash
#######################################
flash: $(TARGET).hex $(TARGET).bin
	@printf "  OPEN_OCD FLASH $<\n"
	$(Q)$(OOCD) $(OOCDFLAGS) -c "program $(TARGET).hex verify reset exit" 

#######################################
# debug
#######################################
debug: $(BUILD_DIR)/$(TARGET).elf
	@printf "  GDB DEBUG $<\n"
	$(Q)$(GDB) -iex 'target extended | $(OOCD) $(OOCDFLAGS) -c "gdb_port pipe"' \
	-iex 'monitor reset halt' -ex 'load'  $(BUILD_DIR)/$(TARGET).elf

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***